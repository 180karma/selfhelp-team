/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data stored under /users/{userId},
 * with the exception of the /aiAgents collection which is publicly readable but write-protected.
 *
 * Data Structure:
 * - /users/{userId}/userProfiles/{userProfileId}: User profile data.
 * - /users/{userId}/diaryEntries/{diaryEntryId}: User's diary entries.
 * - /users/{userId}/psychologicalAssessments/{psychologicalAssessmentId}: User's psychological assessment data.
 * - /users/{userId}/aiAgentInteractions/{aiAgentInteractionId}: Interactions between the user and AI agents.
 * - /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}: AI-generated mental health profiles for the user.
 * - /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}/aiMentalHealthNotes/{aiMentalHealthNoteId}: AI-generated notes related to mental health profiles.
 * - /users/{userId}/subscriptions/{subscriptionId}: User's subscription details.
 * - /aiAgents/{aiAgentId}: AI agent metadata (publicly readable, write-protected).
 *
 * Key Security Decisions:
 * - User data is strictly owned and accessible only by the authenticated user.
 * - Listing of user subcollections is allowed only for the owner.
 * - The /aiAgents collection is publicly readable but only writeable by administrators (currently not implemented).
 * - Data consistency between the path and document ID is enforced on creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read, create, update, or delete their own profile.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123/userProfiles/profile456 if request.auth.uid == 'user123' and request.resource.data.id == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123/userProfiles/profile456.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123/userProfiles/profile456.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123/userProfiles/profile456.
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123' at /users/user123/userProfiles/profile789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's profile at /users/user123/userProfiles/profile789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's profile at /users/user123/userProfiles/profile789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's profile at /users/user123/userProfiles/profile789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for diary entries. Only the authenticated user can read, create, update, or delete their own diary entries.
     * @path /users/{userId}/diaryEntries/{diaryEntryId}
     * @allow (create) - User with UID 'user123' can create a diary entry at /users/user123/diaryEntries/entry456 if request.auth.uid == 'user123' and request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their diary entry at /users/user123/diaryEntries/entry456.
     * @allow (update) - User with UID 'user123' can update their diary entry at /users/user123/diaryEntries/entry456.
     * @allow (delete) - User with UID 'user123' can delete their diary entry at /users/user123/diaryEntries/entry456.
     * @deny (create) - User with UID 'user456' cannot create a diary entry for user 'user123' at /users/user123/diaryEntries/entry789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's diary entry at /users/user123/diaryEntries/entry789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's diary entry at /users/user123/diaryEntries/entry789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's diary entry at /users/user123/diaryEntries/entry789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/diaryEntries/{diaryEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for psychological assessments. Only the authenticated user can read, create, update, or delete their own assessments.
     * @path /users/{userId}/psychologicalAssessments/{psychologicalAssessmentId}
     * @allow (create) - User with UID 'user123' can create an assessment at /users/user123/psychologicalAssessments/assessment456 if request.auth.uid == 'user123' and request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their assessment at /users/user123/psychologicalAssessments/assessment456.
     * @allow (update) - User with UID 'user123' can update their assessment at /users/user123/psychologicalAssessments/assessment456.
     * @allow (delete) - User with UID 'user123' can delete their assessment at /users/user123/psychologicalAssessments/assessment456.
     * @deny (create) - User with UID 'user456' cannot create an assessment for user 'user123' at /users/user123/psychologicalAssessments/assessment789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's assessment at /users/user123/psychologicalAssessments/assessment789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's assessment at /users/user123/psychologicalAssessments/assessment789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's assessment at /users/user123/psychologicalAssessments/assessment789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/psychologicalAssessments/{psychologicalAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AI agent data.  Read access is public, but write access should be restricted to administrators.
     * @path /aiAgents/{aiAgentId}
     * @allow (get) - Any user can read AI agent data.
     * @allow (list) - Any user can list AI agents.
     * @deny (create) - No user can create AI agent.  TODO: Restrict to admins
     * @deny (update) - No user can update AI agent. TODO: Restrict to admins
     * @deny (delete) - No user can delete AI agent. TODO: Restrict to admins
     */
    match /aiAgents/{aiAgentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Restrict to admins
      allow update: if false; // TODO: Restrict to admins
      allow delete: if false; // TODO: Restrict to admins
    }

    /**
     * @description Enforces access control for AI agent interactions. Only the authenticated user can read, create, update, or delete their own interactions.
     * @path /users/{userId}/aiAgentInteractions/{aiAgentInteractionId}
     * @allow (create) - User with UID 'user123' can create an interaction at /users/user123/aiAgentInteractions/interaction456 if request.auth.uid == 'user123' and request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their interaction at /users/user123/aiAgentInteractions/interaction456.
     * @allow (update) - User with UID 'user123' can update their interaction at /users/user123/aiAgentInteractions/interaction456.
     * @allow (delete) - User with UID 'user123' can delete their interaction at /users/user123/aiAgentInteractions/interaction456.
     * @deny (create) - User with UID 'user456' cannot create an interaction for user 'user123' at /users/user123/aiAgentInteractions/interaction789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's interaction at /users/user123/aiAgentInteractions/interaction789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's interaction at /users/user123/aiAgentInteractions/interaction789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's interaction at /users/user123/aiAgentInteractions/interaction789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/aiAgentInteractions/{aiAgentInteractionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for AI mental health profiles. Only the authenticated user can read, create, update, or delete their own profiles.
     * @path /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123/aiMentalHealthProfiles/profile456 if request.auth.uid == 'user123' and request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123/aiMentalHealthProfiles/profile456.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123/aiMentalHealthProfiles/profile456.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123/aiMentalHealthProfiles/profile456.
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123' at /users/user123/aiMentalHealthProfiles/profile789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's profile at /users/user123/aiMentalHealthProfiles/profile789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's profile at /users/user123/aiMentalHealthProfiles/profile789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's profile at /users/user123/aiMentalHealthProfiles/profile789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for AI mental health notes. Only the authenticated user can read, create, update, or delete notes associated with their profiles.
     * @path /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}/aiMentalHealthNotes/{aiMentalHealthNoteId}
     * @allow (create) - User with UID 'user123' can create a note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note789 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note789.
     * @allow (update) - User with UID 'user123' can update their note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note789.
     * @allow (delete) - User with UID 'user123' can delete their note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note789.
     * @deny (create) - User with UID 'user456' cannot create a note for user 'user123' at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note012.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note012.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note012.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's note at /users/user123/aiMentalHealthProfiles/profile456/aiMentalHealthNotes/note012.
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent profile.
     */
    match /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}/aiMentalHealthNotes/{aiMentalHealthNoteId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for subscription details. Only the authenticated user can read, create, update, or delete their own subscription data.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) - User with UID 'user123' can create a subscription at /users/user123/subscriptions/subscription456 if request.auth.uid == 'user123' and request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their subscription at /users/user123/subscriptions/subscription456.
     * @allow (update) - User with UID 'user123' can update their subscription at /users/user123/subscriptions/subscription456.
     * @allow (delete) - User with UID 'user123' can delete their subscription at /users/user123/subscriptions/subscription456.
     * @deny (create) - User with UID 'user456' cannot create a subscription for user 'user123' at /users/user123/subscriptions/subscription789.
     * @deny (get) - User with UID 'user456' cannot read user 'user123's subscription at /users/user123/subscriptions/subscription789.
     * @deny (update) - User with UID 'user456' cannot update user 'user123's subscription at /users/user123/subscriptions/subscription789.
     * @deny (delete) - User with UID 'user456' cannot delete user 'user123's subscription at /users/user123/subscriptions/subscription789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}