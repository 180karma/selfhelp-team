rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User with UID 'user123' creates a profile with ID 'user123'.
     * @deny (create) User with UID 'user123' tries to create a profile with ID 'user456'.
     * @principle Enforces path-based ownership; users can only create/modify profiles under their own user ID.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/diaryEntries/{diaryEntryId}
     * @allow (create) User with UID 'user123' creates a diary entry.
     * @deny (create) User with UID 'user456' tries to create a diary entry under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify entries under their own user ID.
     */
    match /users/{userId}/diaryEntries/{diaryEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/psychologicalAssessments/{assessmentId}
     * @allow (create) User with UID 'user123' creates an assessment.
     * @deny (create) User with UID 'user456' tries to create an assessment under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify assessments under their own user ID.
     */
    match /users/{userId}/psychologicalAssessments/{assessmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access, restricts write access.
     * @path /aiAgents/{aiAgentId}
     * @allow (get, list) Any user can read the AI agent data.
     * @deny (create, update, delete) No client can create, update or delete an AI agent.
     * @principle Public read access for agent metadata, restricted write access.
     */
    match /aiAgents/{aiAgentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/aiAgentInteractions/{aiAgentInteractionId}
     * @allow (create) User with UID 'user123' creates an AI agent interaction.
     * @deny (create) User with UID 'user456' tries to create an interaction under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify interactions under their own user ID.
     */
    match /users/{userId}/aiAgentInteractions/{aiAgentInteractionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}
     * @allow (create) User with UID 'user123' creates a mental health profile.
     * @deny (create) User with UID 'user456' tries to create a profile under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify profiles under their own user ID.
     */
    match /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}/aiMentalHealthNotes/{aiMentalHealthNoteId}
     * @allow (create) User with UID 'user123' creates a mental health note.
     * @deny (create) User with UID 'user456' tries to create a note under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify notes under their own user ID.
     */
    match /users/{userId}/aiMentalHealthProfiles/{aiMentalHealthProfileId}/aiMentalHealthNotes/{aiMentalHealthNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) User with UID 'user123' creates a subscription.
     * @deny (create) User with UID 'user456' tries to create a subscription under 'user123'.
     * @principle Enforces path-based ownership; users can only create/modify subscriptions under their own user ID.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}